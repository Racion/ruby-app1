<h1>GIT</h1>
<ul>
  <li>
    <h3>Inicialización de un repositorio de git nuevo en una aplicación
      existente.</h3>
    <ol>
      <li>Realizar un <code>git init</code> dentro de la carpeta de nuestra aplicación.</li>
      <li>Añadir nuestros archivos para ser comiteados con <code>git add -A o git add . </code>.</li>
      <li>Comitear nuestros archivos con <code>git commit -m "Comentario deseado"</code>.</li>
      <li>Crear un nuevo repositorio en GitHub.</li>
      <li>Seguir las instrucciones de GitHub para un repositorio existente.
      </li>
      <p>
        <code>
          git remote add origin https://github.com/your_user/repository_name.git
          <br>
          git branch -M master
          <br>
          git push -u origin master
        </code>
      </p>
      <li>Tu repositorio ya se encuentra en GitHub.</li>
    </ol>
  </li>
  <li>
    <h3>Creación de un branch nuevo.</h3>
    <p>
      Para crear un nuevo branch y cambiar a este basta usar el comando <code>git checkout -b new_branch_name</code>
    </p>
  </li>
  <li>
    <h3>Realizar un commit incluyendo todos los cambios actuales.</h3>
    <p>
      Para commitear todos los cambios actuales basta con <code>git commit -a -m "Commit"</code>, con este commando hace el commit para todos los archivos que han sido modificados o elminados, en caso de tener archivos nuevos primero debemos agregarlos con <code>git add</code>.
    </p>
  </li>
  <li>
    <h3>Cómo enviar el código al repositorio remoto.</h3>
    <p>Para enviar nuestros cambios debemos hacer un <code>git push -u origin branch_name</code>, despues de usar este comando podemos seguir usando solo <code>git push</code> para que los cambios commiteados queden en nuestro repositorio.</p>
  </li>
  <li>
    <h3>Cómo configurar el origen del repositorio remoto para evitar es-
      cribirlo siempre cada vez que se hace un push o un pull.</h3>
    <p>Para configurar el origen debemos usar <code>git remote add repository_url</code>, despues de esto solo queda configurar el upstream con el comando <code>git push -u origin branch</code>.
    </p>
  </li>
  <li>
    <h3>Diferencia entre un reset y revert.</h3>
    <p><strong>Revert:</strong> Este comando crea un nuevo commit que deshace los cambios del commit anterior, pero lo pone en la historia del proyecto.</p>
    <p><strong>Reset:</strong> modifica el staging area, dependiendo como se invoque puede apuntar a un commit alterando el commit al que la branch se referencia.</p>
  </li>
  <li>
    <h3>Además de cambiar de ramas, para qué más se puede utilizar el
      comando git checkout.</h3>
    <p>El comando checkout se puede utilizar para actualizar el arbol con los archivos correspondan al indice o al arbol especificado, de igual forma podemos crear branchs pasandole como argumento la flag -b, un string y este creara una nueva branch nombrada como el string pasado.</p>
  </li>
  <li>
    <h3>Como puede ver los commits que se han realizado en el proyecto.</h3>
    <p>Con solo utilizar el comando <code>git log</code> mostrara todos los commit, pero debe tener en cuenta que si la lista es muy larga solo mostrara los mas nuevos para ver los mas antiguos debe recorrer el log y para salir de estos solo con escribir q se cerrara el log.</p>
  </li>
  <li>
    <h3>He modificado dos archivos y quiero hacer un commit por cada
      uno de ellos, ¿cómo lo puedo hacer?</h3>
    <p>Para commitear cada archivo lo que tenemos que hacer es <code>git add path_to_file</code> para agregar el archivo al staging area y luego <code>git commit -m 'Commit'</code> y de igual forma se haria para los demas archivos.</p>
  </li>
</ul>
